diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..487f4f2 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -173,6 +173,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            vmprint(pagetable_t);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..441852d 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -128,6 +128,8 @@ exec(char *path, char **argv)
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  if(p->pid==1) vmprint(p->pagetable);
+
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..67da4d8 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -132,6 +132,15 @@ found:
     return 0;
   }
 
+  // Allocate a usyscall page
+  if((p->usyscall = (struct usyscall *)kalloc()) == 0){
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+  // Assign current pid into usyscall
+  p->usyscall->pid = p->pid;
+
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
   if(p->pagetable == 0){
@@ -158,9 +167,15 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
+
+  if(p->usyscall)
+    kfree((void*)p->usyscall);
+  p->usyscall = 0;
+
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
+
   p->sz = 0;
   p->pid = 0;
   p->parent = 0;
@@ -202,6 +217,15 @@ proc_pagetable(struct proc *p)
     return 0;
   }
 
+  // map the usyscall page just below the trapframe page
+  // if error occur, unmap trampoline and trapframe and then free
+  if(mappages(pagetable, USYSCALL, PGSIZE,
+            (uint64)(p->usyscall), PTE_R | PTE_U) < 0) {
+    uvmunmap(pagetable, TRAMPOLINE, 2, 0);
+    uvmfree(pagetable, 0);
+    return 0;
+  }
+
   return pagetable;
 }
 
@@ -212,6 +236,7 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmunmap(pagetable, USYSCALL, 1, 0);
   uvmfree(pagetable, sz);
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..07a58b5 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  // Cache for process id
+  struct usyscall *usyscall;
 };
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..a3cf7b7 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,8 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_G (1L << 5) // Global bit
+#define PTE_A (1L << 6) // Accessed bit
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 88644b2..553e277 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -74,7 +74,27 @@ sys_sleep(void)
 int
 sys_pgaccess(void)
 {
-  // lab pgtbl: your code here.
+  uint64 src;   argaddr( 0, &src );
+  int sz;         argint( 1, &sz );
+  uint64 dst;   argaddr( 2, &dst );
+
+  // Out of virtual address scope
+  if( src >= MAXVA || dst >= MAXVA ) return -1;
+
+  pte_t *pte;
+  uint64 pgmask = 0;
+  struct proc *p = myproc();
+
+  for( int _ = 0; _ < sz; ++_ ) {
+    if( ( pte = walk( p->pagetable, src + _ * PGSIZE, 0 ) ) == 0 ) return -1;
+    if( *pte & PTE_A ) {
+      // If this page is accessed
+      pgmask |= ( 1 << _ );   // Mark this page to pgmask
+      *pte ^= PTE_A;          // Off bit PTE_A for this page
+    }
+  }
+
+  if( copyout( p->pagetable, dst, (char*)&pgmask, sizeof(pgmask) ) == -1 ) return -1;
   return 0;
 }
 #endif
@@ -99,4 +119,4 @@ sys_uptime(void)
   xticks = ticks;
   release(&tickslock);
   return xticks;
-}
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 5c31e87..f6ce48b 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -449,3 +449,32 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+// Recursively print page-table pages.
+void 
+rcsprintpgtbl(pagetable_t pagetable, int level) {
+  
+  for( int i = 0; i < 512; ++i ) {
+    pte_t pte = pagetable[i];
+    
+    // If this page is not valid, pass
+    if( !(pte & PTE_V) ) continue;
+    
+    // PTE and PA of current PTE
+    printf(".."); for( int _ = 1; _ <= level; ++_ ) printf(" ..");
+    printf("%d: pte %p pa %p\n", i, pte, PTE2PA(pte));
+
+    // If this PTE does not point to a lower-level page table, goto the next one
+    if( ( pte & ( PTE_R | PTE_W | PTE_X ) ) != 0 ) continue;
+    // else go to its child.
+    uint64 child = PTE2PA(pte);
+    rcsprintpgtbl( (pagetable_t)child, level + 1 );
+  }
+  
+}
+
+void
+vmprint(pagetable_t pagetable) {
+  printf("page table %p\n", pagetable);
+  rcsprintpgtbl( pagetable, 0 );
+}
\ No newline at end of file
